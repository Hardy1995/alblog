{"version":3,"sources":["jquery.flot.threshold.js"],"names":[],"mappings":"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","file":"jquery.flot.threshold-compiled.js","sourcesContent":["/* Flot plugin for thresholding data.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\n\tseries: {\n\t\tthreshold: {\n\t\t\tbelow: number\n\t\t\tcolor: colorspec\n\t\t}\n\t}\n\nIt can also be applied to a single series, like this:\n\n\t$.plot( $(\"#placeholder\"), [{\n\t\tdata: [ ... ],\n\t\tthreshold: { ... }\n\t}])\n\nAn array can be passed for multiple thresholding, like this:\n\n\tthreshold: [{\n\t\tbelow: number1\n\t\tcolor: color1\n\t},{\n\t\tbelow: number2\n\t\tcolor: color2\n\t}]\n\nThese multiple threshold objects can be passed in any order since they are\nsorted by the processing function.\n\nThe data points below \"below\" are drawn with the specified color. This makes\nit easy to mark points below 0, e.g. for budget data.\n\nInternally, the plugin works by splitting the data into two series, above and\nbelow the threshold. The extra series below the threshold will have its label\ncleared and the special \"originSeries\" attribute set to the original series.\nYou may need to check for this in hover events.\n\n*/\n\n(function ($) {\n    var options = {\n        series: { threshold: null } // or { below: number, color: color spec}\n    };\n    \n    function init(plot) {\n        function thresholdData(plot, s, datapoints, below, color) {\n            var ps = datapoints.pointsize, i, x, y, p, prevp,\n                thresholded = $.extend({}, s); // note: shallow copy\n\n            thresholded.datapoints = { points: [], pointsize: ps, format: datapoints.format };\n            thresholded.label = null;\n            thresholded.color = color;\n            thresholded.threshold = null;\n            thresholded.originSeries = s;\n            thresholded.data = [];\n \n            var origpoints = datapoints.points,\n                addCrossingPoints = s.lines.show;\n\n            var threspoints = [];\n            var newpoints = [];\n            var m;\n\n            for (i = 0; i < origpoints.length; i += ps) {\n                x = origpoints[i];\n                y = origpoints[i + 1];\n\n                prevp = p;\n                if (y < below)\n                    p = threspoints;\n                else\n                    p = newpoints;\n\n                if (addCrossingPoints && prevp != p && x != null\n                    && i > 0 && origpoints[i - ps] != null) {\n                    var interx = x + (below - y) * (x - origpoints[i - ps]) / (y - origpoints[i - ps + 1]);\n                    prevp.push(interx);\n                    prevp.push(below);\n                    for (m = 2; m < ps; ++m)\n                        prevp.push(origpoints[i + m]);\n                    \n                    p.push(null); // start new segment\n                    p.push(null);\n                    for (m = 2; m < ps; ++m)\n                        p.push(origpoints[i + m]);\n                    p.push(interx);\n                    p.push(below);\n                    for (m = 2; m < ps; ++m)\n                        p.push(origpoints[i + m]);\n                }\n\n                p.push(x);\n                p.push(y);\n                for (m = 2; m < ps; ++m)\n                    p.push(origpoints[i + m]);\n            }\n\n            datapoints.points = newpoints;\n            thresholded.datapoints.points = threspoints;\n            \n            if (thresholded.datapoints.points.length > 0) {\n                var origIndex = $.inArray(s, plot.getData());\n                // Insert newly-generated series right after original one (to prevent it from becoming top-most)\n                plot.getData().splice(origIndex + 1, 0, thresholded);\n            }\n                \n            // FIXME: there are probably some edge cases left in bars\n        }\n        \n        function processThresholds(plot, s, datapoints) {\n            if (!s.threshold)\n                return;\n            \n            if (s.threshold instanceof Array) {\n                s.threshold.sort(function(a, b) {\n                    return a.below - b.below;\n                });\n                \n                $(s.threshold).each(function(i, th) {\n                    thresholdData(plot, s, datapoints, th.below, th.color);\n                });\n            }\n            else {\n                thresholdData(plot, s, datapoints, s.threshold.below, s.threshold.color);\n            }\n        }\n        \n        plot.hooks.processDatapoints.push(processThresholds);\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'threshold',\n        version: '1.2'\n    });\n})(jQuery);\n"]}